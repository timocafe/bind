/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_INTERFACE_SHORTCUTS
#define BIND_INTERFACE_SHORTCUTS

namespace bind {

    inline void sync(){
        bind::select().sync();
    }

    inline int num_procs(){
        return bind::select().get_num_procs();
    }

    inline int num_threads(){
        static int n = BIND_NUM_THREADS; return n;
    }

    inline rank_t rank(){
        return bind::select().get_rank();
    }

    template<typename T>
    inline void collect(T* o){
        bind::select().collect(o);
    }

    inline void collect(model::revision* r, model::revision*& s){
        bind::select().collect(r, s);
    }

    template<typename V>
    inline bool weak(const V& obj){
        return obj.allocator_.desc->weak();
    }

    template<typename V>
    inline size_t extent(V& obj){
        return obj.allocator_.desc->extent;
    }

}

#endif
