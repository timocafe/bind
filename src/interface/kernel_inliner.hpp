/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef BIND_INTERFACE_KERNEL_INLINER
#define BIND_INTERFACE_KERNEL_INLINER

namespace bind {
    using model::functor;

    template<device D, typename T>
    struct check_if_not_reference {
        template<bool C, typename F>  struct fail_if_true { typedef F type; };
        template<typename F> struct fail_if_true<true, F> { };
        typedef typename fail_if_true<modifier<D, T>::type::ReferenceOnly, T>::type type; // T can be passed only by reference
    };

    template<device D, typename T>
    struct check_if_not_reference<D, T&> {
        typedef T type;
    };

    template <device D, typename T>
    using checked_remove_reference = typename std::remove_reference<
                                         typename check_if_not_reference< D, T >::type
                                     >::type;

    template<device D, int N> void expand_modify_remote(){}
    template<device D, int N> void expand_modify_local(functor* o){}
    template<device D, int N> void expand_modify_common(functor* o){}
    template<device D, int N> bool expand_pin(functor* o){ return false; }
    template<device D, int N> void expand_load(functor* o){ }
    template<device D, int N> void expand_deallocate(functor* o){ }
    template<device D, int N> bool expand_ready(functor* o){ return true; }

    template<device D, int N, typename T, typename... TF>
    void expand_modify_remote(T& arg, TF&... other){
        modifier<D, T>::type::template apply_remote<N>(arg);
        expand_modify_remote<D, N+1>(other...);
    }
    template<device D, int N, typename T, typename... TF>
    void expand_modify_local(functor* o, T& arg, TF&... other){
        modifier<D, T>::type::template apply_local<N>(arg, o);
        expand_modify_local<D, N+1>(o, other...);
    }
    template<device D, int N, typename T, typename... TF>
    void expand_modify_common(functor* o, T& arg, TF&... other){
        modifier<D, T>::type::template apply_common<N>(arg, o);
        expand_modify_common<D, N+1>(o, other...);
    }
    template<device D, int N, typename T, typename... TF>
    bool expand_pin(functor* o){
        return modifier<D, checked_remove_reference<D, T> >::type::template pin<N>(o) ||
               expand_pin<D, N+1, TF...>(o);
    }
    template<device D, int N, typename T, typename... TF>
    void expand_load(functor* o){
        modifier<D, checked_remove_reference<D, T> >::type::template load<N>(o);
        expand_load<D, N+1, TF...>(o);
    }
    template<device D, int N, typename T, typename... TF>
    void expand_deallocate(functor* o){
        modifier<D, checked_remove_reference<D, T> >::type::template deallocate<N>(o);
        expand_deallocate<D, N+1, TF...>(o);
    }
    template<device D, int N, typename T, typename... TF>
    bool expand_ready(functor* o){
        return modifier<D, checked_remove_reference<D, T> >::type::template ready<N>(o) &&
               expand_ready<D, N+1, TF...>(o);
    }

    template<device D, typename FP, FP fp>
    struct kernel_inliner {};

    template<device D, typename... TF , void(*fp)( TF... )>
    struct kernel_inliner<D, void(*)( TF... ), fp> {
        static const int arity = sizeof...(TF);

        static inline void latch(functor* o, TF&... args){
            #ifndef BIND_TRANSPORT_NOP
            if(bind::select().get_node().remote())   { expand_modify_remote<D, 0>(args...); return; }
            else if(bind::select().get_node().local()) expand_modify_local<D, 0>(o, args...);
            else
            #endif
            expand_modify_common<D, 0>(o, args...);
            expand_pin<D, 0, TF...>(o) || bind::select().queue(o);
        }
        static inline void cleanup(functor* o){
            expand_deallocate<D, 0, TF...>(o);
        }
        static inline bool ready(functor* o){
            return expand_ready<D, 0, TF...>(o);
        }
        template<size_t...I>
        static void expand_invoke(index_sequence<I...>, functor* o){
            (*fp)(modifier<D, checked_remove_reference<D, TF> >::type::template forward<I>(o)...);
        }
        static inline void invoke(functor* o){
            expand_load<D, 0, TF...>(o);
            expand_invoke(make_index_sequence<sizeof...(TF)>(), o);
        }
    };

}

#endif

